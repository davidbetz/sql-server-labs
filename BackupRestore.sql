USE master;
GO

IF DATABASEPROPERTYEX('BackupRestore', 'Status') IS NOT NULL
BEGIN
	ALTER DATABASE BackupRestore SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
	DROP DATABASE BackupRestore;
END
GO

CREATE DATABASE BackupRestore;
GO

use BackupRestore;

DBCC TRACEON (3604);
DBCC TRACEON (3004);
GO

CREATE TABLE Bigger
(
ID int identity,
Code int,
Text1 varchar(2000),
Text2 varchar(max)
);
GO

CREATE PROC Populate
AS
INSERT INTO Bigger VALUES
(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
,(CEILING(RAND()*20), REPLICATE('Data1', 100), REPLICATE('Data2', 10000))
GO

Populate
GO 100

SELECT GETDATE(), COUNT(*) FROM Bigger WITH (NOLOCK);
GO

BACKUP DATABASE BackupRestore TO CData WITH FORMAT, STATS = 10, DESCRIPTION = 'full';
GO

Populate
GO 100

SELECT GETDATE(), COUNT(*) FROM Bigger WITH (NOLOCK);
GO

BACKUP DATABASE BackupRestore TO CDiff WITH DIFFERENTIAL, DESCRIPTION = 'first diff';
GO

Populate
GO 100

SELECT GETDATE(), COUNT(*) FROM Bigger WITH (NOLOCK);
GO

BACKUP LOG BackupRestore TO CLog WITH STATS = 10, DESCRIPTION = 'first log';
GO

Populate
GO 100

SELECT GETDATE(), COUNT(*) FROM Bigger WITH (NOLOCK);
GO

BACKUP LOG BackupRestore TO CLog2 WITH STATS = 10, DESCRIPTION = 'second log';
GO

Populate
GO 100

SELECT GETDATE(), COUNT(*) FROM Bigger WITH (NOLOCK);
GO

BACKUP DATABASE BackupRestore TO CDiff with differential, init, stats, description = 'second diff';
GO

Populate
GO 100

SELECT GETDATE(), COUNT(*) FROM Bigger WITH (NOLOCK);
GO

BACKUP LOG BackupRestore TO CLog WITH INIT, STATS = 10, DESCRIPTION = 'first log';
GO

Populate
GO 100

SELECT GETDATE(), COUNT(*) FROM Bigger WITH (NOLOCK);
GO

BACKUP LOG BackupRestore TO CLog2 WITH INIT, STATS = 10, DESCRIPTION = 'second log';
GO

Populate
GO 100

SELECT GETDATE(), COUNT(*) FROM Bigger WITH (NOLOCK);
GO

BACKUP LOG BackupRestore TO CLog3 WITH INIT, STATS = 10, DESCRIPTION = 'third log';
GO

Populate
GO 100

SELECT GETDATE(), COUNT(*) FROM Bigger WITH (NOLOCK);
GO

BACKUP LOG BackupRestore TO CLog4 WITH INIT, STATS = 10, DESCRIPTION = 'fourth log';
GO

USE master;
GO

DROP DATABASE BackupRestore;
GO

RESTORE HEADERONLY FROM CData;
RESTORE HEADERONLY FROM CDiff;
RESTORE HEADERONLY FROM CLog;
RESTORE HEADERONLY FROM CLog2;
RESTORE HEADERONLY FROM CLog3;
RESTORE HEADERONLY FROM CLog4;
GO

RESTORE DATABASE BackupRestore FROM CData WITH STANDBY = 'l:\standby.dat';
GO

RESTORE DATABASE BackupRestore FROM CDiff WITH STANDBY = 'l:\standby.dat';
GO

RESTORE DATABASE BackupRestore FROM CLog WITH NORECOVERY;
GO

RESTORE DATABASE BackupRestore FROM CLog2 WITH STANDBY = 'l:\standby.dat';
GO

-- skipping log3 and log4 backups
RESTORE DATABASE BackupRestore WITH RECOVERY;
GO

USE BackupRestore;

SELECT GETDATE(), COUNT(*) FROM Bigger WITH (NOLOCK);